// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecFlow.Tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class MainSpecFeature : Xunit.IClassFixture<MainSpecFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "MainSpec.feature"
#line hidden
        
        public MainSpecFeature(MainSpecFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("zh-CN"), "MainSpec", "\t为了避免愚蠢的错误\r\n\t作为一个数学白痴\r\n\t我想知道两个数的和", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="添加两个数字")]
        [Xunit.TraitAttribute("FeatureTitle", "MainSpec")]
        [Xunit.TraitAttribute("Description", "添加两个数字")]
        [Xunit.TraitAttribute("Category", "Add")]
        public virtual void 添加两个数字()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("添加两个数字", new string[] {
                        "Add"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("我已经输入了第一个数50到计算器", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "假如");
#line 9
 testRunner.And("我已经输入了第二个数70到计算器", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "而且");
#line 10
 testRunner.When("我点击求和", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "当");
#line 11
 testRunner.Then("结果应该显示120", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "那么");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="新的求和需求")]
        [Xunit.TraitAttribute("FeatureTitle", "MainSpec")]
        [Xunit.TraitAttribute("Description", "新的求和需求")]
        [Xunit.TraitAttribute("Category", "AddV2")]
        public virtual void 新的求和需求()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("新的求和需求", new string[] {
                        "AddV2"});
#line 13
this.ScenarioSetup(scenarioInfo);
#line 14
 testRunner.Given("我已经输入了第一个数30到计算器", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "假如");
#line 15
 testRunner.And("我已经输入了第二个数25到计算器", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "而且");
#line 16
 testRunner.When("点击新的求和", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "当");
#line 17
 testRunner.Then("结果应该显示55", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "那么");
#line 18
 testRunner.But("我输入了大于50的数到计算器", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "但是");
#line 19
 testRunner.When("点击新的求和则抛出AddException异常", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "当");
#line 20
 testRunner.Given("我输入两个数的和大于80", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "假如");
#line 21
 testRunner.When("点击新的求和则抛出SumException异常", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "当");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                MainSpecFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                MainSpecFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
